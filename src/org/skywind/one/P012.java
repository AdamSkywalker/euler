package org.skywind.one;

import org.skywind.util.Factorization;
import org.skywind.util.Primes;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.counting;
import static java.util.stream.Collectors.groupingBy;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Author: Sergey Saiyan sergey.sova42@gmail.com
 * Created at: 5/13/17.
 */
public class P012 {

    public static void main(String[] args) {
        int n = 500;
        triangleNumberStream()
                .filter(x -> numberOfDivisors(x) > n)
                .findFirst()
                .ifPresent(System.out::print);
    }

    private static IntStream triangleNumberStream() {
        AtomicInteger idx = new AtomicInteger(2);
        return IntStream.iterate(1, x -> x + idx.getAndIncrement());
    }

    // takes minutes
    private static long numberOfDivisorsBruteForce(int x) {
        return IntStream.rangeClosed(1, x).filter(n -> x % n == 0).count();
    }

    private static long numberOfDivisors(int x) {
        Map<Integer, Long> powers = Factorization.getFactors(x).stream().collect(groupingBy(n -> n, counting()));
        return powers.values().stream().map(n -> n + 1).reduce(1L, (a, b) -> a * b);
    }
}
