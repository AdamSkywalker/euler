package org.skywind.one;

import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
 * The first ten pentagonal numbers are:
 * <p>
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * <p>
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 * <p>
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
 * and D = |Pk − Pj| is minimised; what is the value of D?
 * <p>
 * Author: Sergey Saiyan sergey.sova42@gmail.com
 * Created at 27/05/2017.
 */
public class P044 {

    public static void main(String[] args) {
        long[] numbers = IntStream.range(0, 1_000_000).mapToLong(P044::getPentagonal).toArray();
        Set<Long> set = LongStream.of(numbers).boxed().collect(Collectors.toSet());

        long min = Integer.MAX_VALUE;
        int minI = 0;
        int minJ = 0;

        main:
        for (int i = 1; i < numbers.length; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
                long diff = numbers[j] - numbers[i];
                if (set.contains(numbers[i] + numbers[j])) {
                    if (set.contains(diff) && diff < min) {
                        min = diff;
                        minI = i;
                        minJ = j;
                    }
                }

                if (diff >= min) continue main;
            }
        }

        System.out.println("min: " + min);
        System.out.println("i: " + numbers[minI]);
        System.out.println("j: " + numbers[minJ]);
    }

    private static long getPentagonal(long n) {
        return n * (3 * n - 1) / 2;
    }
}
